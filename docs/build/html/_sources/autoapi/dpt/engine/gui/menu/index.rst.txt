:mod:`dpt.engine.gui.menu`
==========================

.. py:module:: dpt.engine.gui.menu


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   bar/index.rst
   button/index.rst
   checkbox/index.rst
   fade/index.rst
   levelOverview/index.rst
   progressbar/index.rst
   radioButton/index.rst
   score_stars/index.rst
   simpleSprite/index.rst
   slide/index.rst
   slider/index.rst
   text/index.rst
   timer/index.rst
   window/index.rst
   window_item/index.rst


Package Contents
----------------


.. py:class:: Button(x, y, width, height, normal_image, **kwargs)

   Bases: :class:`pygame.sprite.Sprite`

   Crée un bouton

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type x: int
   :param width: Largeur
   :type width: int
   :param height: Hauteur
   :type height: int
   :param normal_image: Image
   :type normal_image: pygame.Surface

   :keyword pushed_image: Image utilisé lorsque le bouton est pressé
   :keyword locked_image: Image utilisé lorque le bouton est verrouillé
   :keyword hover_image: Image utilisé lorsque le bouton est survolé
   :keyword font: Police d'écriture
   :keyword font_color: Couleur du texte
   :keyword text: Texte du bouton
   :keyword text_sprite: Image à afficher sur le bouton (Utilise l'objet 'TextSpriteButton')

   :rtype: Button

   .. attribute:: buttonsGroup
      

      

   .. attribute:: text_sprite_buttonsGroup
      

      

   .. attribute:: text_buttonsList
      :annotation: = []

      

   .. method:: update(self)


      Actualise le bouton


   .. method:: lock(self)


      Verrouille le bouton


   .. method:: unlock(self)


      Déverrouille 


   .. method:: kill(self)



   .. method:: main_loop(cls)
      :classmethod:


      Actualise tous les boutons



.. py:class:: Checkbox(x, y, size)

   Bases: :class:`pygame.sprite.Sprite`

   Crée une case à cocher

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type y: int
   :param size: Taille (relative)
   :type size: float

   :rtype: Checkbox

   .. attribute:: checkbox_group
      

      

   .. method:: update(self)


      Actualise la case à cocher


   .. method:: main_loop(cls)
      :classmethod:


      Actualise toutes les cases à cocher



.. py:class:: ProgressBar(x, y, width, height, image, image2, max_value)

   Bases: :class:`pygame.sprite.Sprite`

   Crée une barre de progression

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type y: int
   :param width: Largeur
   :type width: int
   :param height: Hauteur
   :type height: int
   :param image: Image du cadre
   :type image: pygame.Surface
   :param image2: Image de la barre
   :type image2: pygame.Surface
   :param max_value: Valeur maximale de la barre
   :type max_value: float

   :rtype: ProgressBar

   .. attribute:: progress_bar_group
      

      

   .. attribute:: bar_group
      

      

   .. method:: update(self)


      Actualise la barre de progression


   .. method:: main_loop(cls)
      :classmethod:


      Actualise toutes les barres de progression



.. py:class:: Slider(x, y, width, height, value, **kwargs)

   Bases: :class:`object`

   Crée une glissière

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type x: int
   :param width: Largeur
   :type width: int
   :param height: Hauteur
   :type height: int
   :param value: Valeur par défaut (relative)
   :type value: float

   :keyword image_left: Image du bouton de gauche
   :keyword image_left_pushed: Image du bouton de gauche une fois pressé
   :keyword image_right: Image du bouton de gauche
   :keyword image_right_pushed: Image du bouton de gauche une fois pressé
   :keyword image_slide: Image du bouton de glissière
   :keyword image_slide_pushed: Image du bouton de glissière une fois pressé
   :keyword image_progress_bar_frame: Image du cadre de la bar de progression
   :keyword image_progress_bar_bar: Image de la bar de progression

   :rtype: Slider

   .. attribute:: slide_group
      

      

   .. attribute:: slider_list
      :annotation: = []

      

   .. method:: update(self)


      Actualise la glissière


   .. method:: main_loop(cls)
      :classmethod:


      Actualise toutes les glissières


   .. method:: kill(self)


      Supprime la glissière


   .. method:: draw(self, surface)


      Dessine la glissière



.. py:class:: Window(x, y, width_number, height_number, **kwargs)

   Crée une fenêtre

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type x: int
   :param width_number: Largeur (en nombre de sprites)
   :type width_number: int
   :param height_number: Hauteur (en nombre de sprites)
   :type height_number: int

   :keyword centerx: Abscisse du centre, si specifié, ignore le paramètre x original
   :keyword centery: ordonnée du centre, si specifié, ignore le paramètre y original

   :rtype: Window

   .. attribute:: window_list
      :annotation: = []

      

   .. method:: kill(self)



   .. method:: main_loop(cls)
      :classmethod:


      Actualise toutes les fenêtres



.. py:class:: Text(x, y, text, size, color, font, **kwargs)

   Crée un texte

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type x: int
   :param text: Texte
   :type text: str
   :param size: Taille de la police d'écriture
   :type size: int
   :param color: Couleur du texte
   :type color: (int, int, int, int)
   :param font: Police d'écriture
   :type font: str

   :keyword centerx: Abscisse du centre, si specifié, ignore le paramètre x original
   :keyword centery: ordonnée du centre, si specifié, ignore le paramètre y original

   :rtype: Text

   .. attribute:: text_list
      :annotation: = []

      

   .. method:: draw(self, surface)


      Dessine le texte


   .. method:: kill(self)


      Supprime le texte


   .. method:: main_loop(cls)
      :classmethod:


      Dessine tous les textes



.. py:class:: RadioButton(x, y, size, btn_list)

   Bases: :class:`pygame.sprite.Sprite`

   Crée un bouton radio

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type y: int
   :param size: Taille (relative)
   :type size: float
   :param btn_list: Liste contenant les autres boutons liés
   :type btn_list: list

   :rtype: RadioButton

   .. attribute:: radio_button_group
      

      

   .. method:: update(self)


      Actualise le bouton radio


   .. method:: main_loop(cls)
      :classmethod:


      Actualise tous les boutons radio



.. py:class:: Timer

   .. attribute:: texture_semi_colon
      :annotation: = dpt.images.gui.symbols.SYMB_SEMICOLON

      

   .. attribute:: textures
      :annotation: = ['dpt.images.gui.symbols.SYMB_0', 'dpt.images.gui.symbols.SYMB_1', 'dpt.images.gui.symbols.SYMB_2', 'dpt.images.gui.symbols.SYMB_3', 'dpt.images.gui.symbols.SYMB_4', 'dpt.images.gui.symbols.SYMB_5', 'dpt.images.gui.symbols.SYMB_6', 'dpt.images.gui.symbols.SYMB_7', 'dpt.images.gui.symbols.SYMB_8', 'dpt.images.gui.symbols.SYMB_9']

      

   .. attribute:: digit1
      

      

   .. attribute:: digit2
      

      

   .. attribute:: semicolon
      

      

   .. attribute:: digit3
      

      

   .. attribute:: digit4
      

      

   .. attribute:: effects_text
      

      

   .. attribute:: rect
      

      

   .. attribute:: digits_images
      

      

   .. attribute:: semicolon_image
      

      

   .. attribute:: height_digits
      

      

   .. attribute:: width_digits
      

      

   .. attribute:: width_semicolon
      

      

   .. attribute:: time
      :annotation: = 0

      

   .. attribute:: e_time
      :annotation: = 0

      

   .. method:: start(cls, time)
      :classmethod:


      Crée un chronomètre

      :param time: Temps en secondes
      :type time: int

      :rtype: Timer


   .. method:: update(cls)
      :classmethod:


      Actualise le timer


   .. method:: pause_update(cls)
      :classmethod:


      Actualise le timer durant la pause


   .. method:: kill(cls)
      :classmethod:


      Supprime le timer


   .. method:: main_loop(cls)
      :classmethod:


      Actualise le timer



.. py:class:: LevelOverview(x, y, level_name, size)

   Crée un résumé de niveau

   :param x: Abscisse
   :type x: int
   :param y: Ordonnée
   :type y: int
   :param level_name: Nom du niveau
   :type level_name: str
   :param size: Taille (relative)
   :type size: float

   :rtype: LevelOverview

   .. attribute:: level_overview_list
      :annotation: = []

      

   .. method:: update(self)


      Actualise le résumé de niveau


   .. method:: kill(self, del_bool=True)


      Tue le résumé de niveau

      :param del_bool: Supprime de la liste
      :type del_bool: bool


   .. method:: main_loop(cls)
      :classmethod:


      Actualise tous les résumés de niveau



.. function:: delete_items()

   Supprime toutes les éléments de menu


.. function:: main_loop()

   Execute toutes les boucles des éléments de menu


